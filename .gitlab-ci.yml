stages:
  - build
  - deploy-stage

variables:
  VARIABLE_DATA: Gitlab-CI-YAML

build:
  stage: build
  only:
    - main
  image: docker:18-git
  services:
    - docker:18-dind
  script:
    # get node app version from package.json for use in tagging docker image
    - apk update && apk add jq
    - export VERSION=`jq -r ".version" < ./package.json`
    # login to docker
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # build and tag docker image
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest .
    # publish finished image
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:latest

# build:
#   image: docker:20.10.16
#   stage: build
#   services:
#     - docker:20.10.16-dind
#   variables:
#     IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build -t $IMAGE_TAG .
#     - docker push $IMAGE_TAG

deploy-stage:
  stage: deploy-stage
  only:
    - main
  image: alpine:latest
  before_script:
    - "which ssh-agent || ( apk update && apk add openssh-client )"
    - eval $(ssh-agent -s)
    - echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # stop existing docker container & remove images
    - ssh $USER@$HOST_IP "docker stop $CI_PROJECT_NAME || true"
    - ssh $USER@$HOST_IP "docker rm $CI_PROJECT_NAME || true"
    - ssh $USER@$HOST_IP "docker image rm $CI_REGISTRY_IMAGE:latest || true"
    # pull new container
    - ssh $USER@$HOST_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh $USER@$HOST_IP "docker pull $CI_REGISTRY_IMAGE:latest"
    # run new container
    - ssh $USER@$HOST_IP "docker run -d --restart always --name $CI_PROJECT_NAME -p 8081:80 $CI_REGISTRY_IMAGE:latest"
    - echo "SUCCESS!"